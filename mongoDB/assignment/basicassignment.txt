Basic Assignment

Query/Find Documents

1. get all documents
A: db.movies.find()

2.get all documents with writer set to "Quentin Tarantino".
A: db.movies.find({"writer":"Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt".
A: db.movies.find({actor:"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit".
A: db.movies.find({franchise:"The Hobbit"})

5. get all movies released in the 90s.
A: db.movies.find({},{title: "$title",year: {$lt:["$year",2000]},actors: "$actors",writer: "$writer",title: "$title"})

6. get all movies released before the year 2000 or after 2010
A: db.movies.find({$or: [{year: {$lte:2000}},{year: {$gte: 2010}}]})

Update Documents

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain 
home - and the gold within it - from the dragon Smaug."
A: db.movies.updateOne({title:'The hobbit: An Unexpected journey'},{$set: {synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to
 reclaim their mountain home - and the gold within it - from the dragon Smaug.'}})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, 
from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
A: db.movies.updateOne({title:"The Hobbit: The Desolation of Smaug"},{$set: {synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor,
 their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'}})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
db.movies.updateOne({movie: 'Pulp Fiction'},{$set: {actor: 'Samuel L. Jackson}})

Text Search

1. find all movies that have a synopsis that contains the word "Bilbo"
A: db.movies.find({synopsis: /.Bilbo./})

2. find all movies that have a synopsis that contains the word "Gandalf"
A: db.movies.find({synopsis: /.Gandalf./})

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
A: db.movies.find({$and: [{synopsis: /Bilbo/}, {synopsis: {$not: /Gandalf/}}]})

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
A: db.movies.find({$or: [{synopsis: /dwarves/}, {synopsis: /hobbit/}]})

5. find all movies that have a synopsis that contains the word "gold" and "dragon"
A: db.movies.find({$and: [{synopsis: /.gold./},{synopsis: /.dragon./}]})

Delete Documents

1.delete the movie "Pee Wee Herman's Big Adventure"
A: db.movies.remove({title: "Pee Wee Herman's Big Adventure"})

2. delete the movie "Avatar"
A: db.movies.remove({title: "Avatar"})

Relationships

1. find all users
A: db.users.find()

2. find all posts
A: db.posts.find({})

3. find all posts that was authored by "GoodGuyGreg"
A: db.posts.find({username: "GoodGuyGreg"})

4. find all posts that was authored by "ScumbagSteve"
A: db.posts.find({username: "ScumbagSteve"})

5. find all comments
A: db.comments.find()

6. find all comments that was authored by "GoodGuyGreg"
A: db.comments.find({username: "GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve"
A: db.comments.find({username: "ScumbagSteve"})

8. find all comments belonging to the post "Reports a bug in your code"
A: db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id})